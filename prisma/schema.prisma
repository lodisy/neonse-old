// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// graphql schema 注释 https://github.com/unlight/prisma-nestjs-graphql

// 多语言考虑用 JSON 等待更新：https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#json-faqs

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../libs/graphql/src/lib"
  reExport               = All
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

// Models

// shared

enum Size {
  XS
  S
  M
  L
  XL
  IT44
  IT46
  IT48
  IT50
  IT52
  OS
  JP0
  JP1
  JP2
  JP3
  JP4
  EU41
  EU42
  EU43
  EU44
  EU45
}

enum Currency {
  USD
  CNY
  HKD
  EUR
  GBP
}

enum Locale {
  ZHS
  ZHT
  ENG
}

enum ContentType {
  PRODUCT
  ARTICLE
  LOOKBOOK
  BRAND
}

model Source {
  /// @HideField({input:true})
  id   String  @id @default(cuid())
  name String // name of person or website or magzine etc
  link String?

  file   File   @relation(fields: [fileId], references: [id])
  fileId String @unique

}

// File

enum FileType {
  // image
  jpg
  jpeg
  png
  gif
  webp
  raw
  svg
  // video
  mp4
  webm
  // sound
  mp3
  ogg
  // PDF
  pdf
  OTHER
}

model File {
  id              String   @id @default(cuid())
  name            String
  alt             String?
  title           String?
  caption         String?
  format          FileType
  size            Bytes
  width           Int?
  height          Int?
  source          Source? // a file has its source
  autoPlay        Boolean?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  profile         Profile? @relation("Uploads", fields: [profileId], references: [id]) // uploaded by 
  profileId       String?
  profileAvatar   Profile? @relation("Avatar", fields: [profileAvatarId], references: [id])
  profileAvatarId String?
  review          Review?  @relation(fields: [reviewId], references: [id])
  reviewId        String?
}

// 角色

enum RoleStatus {
  NORMAL
  ABNORMAL
}

model Role {
  id          String      @id @default(cuid())
  /// @Validator.MaxLength(10)
  name        String
  slug        String      @unique
  /// @Validator.MaxLength(50)
  description String?
  /// @HideField({input:true, output:false})
  status      RoleStatus? @default(NORMAL)
  isDefault   Boolean?    @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  users       User[]
}

// User Model

model User {
  id                 String    @id @default(cuid())
  /// @Validator.IsEmail()
  email              String    @unique
  username           String?   @unique
  /// @Validator.MinLength(6)
  /// @Validator.MaxLength(10)
  /// @HideField()
  password           String
  /// @HideField({ output: true, input: true })
  roles              Role[]
  /// @HideField({ output: true, input: true })
  jwtToken           String    @unique
  /// @HideField({ output: true, input: true })
  resetPasswordToken String?   @unique
  /// @HideField({ output: true, input: true })
  identifierToken    String?   @unique
  /// @HideField({input:true})
  createdAt          DateTime  @default(now())
  /// @HideField({input:true})
  updatedAt          DateTime? @updatedAt
  profile            Profile?
}

model Profile {
  /// @HideField({input:true})
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id]) // a user has a profile
  userId     String    @unique
  /// @HideField({input:true})
  brands     Brand[] // many to many
  /// @Validator.MinLength(2)
  name       String
  phone      BigInt?
  avatar     File?     @relation("Avatar") // a user has an avatar
  point      Int?      @default(0)
  level      Int?
  addresses  Address[] // a profile has multiple addresses
  cards      Card[] // a profile has multiple cards
  reviews    Review[] // a profile may have multiple reviews
  uploads    File[]    @relation("Uploads") // a profile has multiple uploads
  likes      Like[] // a profile has multiple likes
  // self relation
  followedBy Profile[] @relation("UserFollows", references: [id])
  following  Profile[] @relation("UserFollows", references: [id])
  comments   Comment[]

}

model Address {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  name      String
  email     String?
  phone     String?
  street    String
  district  String?
  city      String
  state     String?
  zip       String?
  country   String
}

model Card {
  /// @HideField({input:true})
  id         String   @id @default(cuid())
  cardHolder Profile  @relation(fields: [profileId], references: [id])
  profileId  String   @unique
  number     BigInt   @unique
  name       String
  expiration DateTime
  bank       String?
}

// Product

model Product {
  id          String            @id @default(cuid())
  name        String
  sku         String            @unique
  images      String[]
  brands      Brand[]
  types       ProductType[]
  categories  ProductCategory[]
  variants    ProductVariant[]
  discription String
  price       Int
  featured    Boolean?          @default(false)
  draft       Boolean?          @default(true)
  stock       Int
  sold        Int?              @default(0)
  reviews     Review[]
  likes       Like[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
}

model ProductVariant {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  name      String?
  /// @HideField({input:true})
  sku       String   @unique
  images    String[]
  brands    String
  style     String
  size      Size
  price     Int
  sale      Int?
  stock     Int?     @default(1)
  sold      Int      @default(0)
}

model ProductCategory {
  id       String            @id @default(cuid())
  name     String
  slug     String            @unique
  parentId String?
  parent   ProductCategory?  @relation("ParentChildren", fields: [parentId], references: [id]) // a product category could have a parent
  children ProductCategory[] @relation("ParentChildren") // a product category could have many children
  products Product[]
  types    ProductType[]
}

model ProductType {
  id         String            @id @default(cuid())
  name       String            @unique
  slug       String            @unique
  products   Product[]
  categories ProductCategory[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  founders    Profile[] // many to many
  country     String?
  year        Int?
  description String?
  products    Product[] // many to many

}

// Review

model Review {
  id          String  @id @default(cuid())
  by          Profile @relation(fields: [profileId], references: [id]) // 一个买家有多个评价
  profileId   String  @unique
  for         Product @relation(fields: [productId], references: [id]) // 一个商品有多个评价
  productId   String  @unique
  /// @Validator.IsInt()
  /// @Validator.Min(1)
  /// @Validator.Max(5)
  rate        Int // 评分从 1 到 5
  description String?
  /// @Validator.MaxLength(3)
  media       File[] // 上传不超过三张图片
}

// Order

model Item {
  id       String @id @default(cuid())
  quantity Int
}

model Order {
  id String @id @default(cuid())


}

model OrderDetail {
  id String @id @default(cuid())

}

// 喜欢收藏

model Like {
  id        String      @id @default(cuid())
  by        Profile     @relation(fields: [profileId], references: [id])
  profileId String      @unique
  type      ContentType
  product   Product?    @relation(fields: [productId], references: [id])
  productId String?     @unique
  // TODO other content types
  createdAt DateTime    @default(now())
}

// 评论（匿名）

model Comment {
  id        String   @id @default(cuid())
  name      String
  email     String
  by        Profile? @relation(fields: [profileId], references: [id]) // 可�������已注册用户
  profileId String?  @unique
  content   String
}
